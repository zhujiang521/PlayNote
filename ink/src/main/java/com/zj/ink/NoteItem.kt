@file:OptIn(ExperimentalSharedTransitionApi::class)

package com.zj.ink

import androidx.compose.animation.ExperimentalSharedTransitionApi
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.IntrinsicSize
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.dimensionResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.zj.data.R
import com.zj.data.common.DeleteDialog
import com.zj.data.common.HighlightedText
import com.zj.data.common.SwipeBox
import com.zj.data.common.SwipeBoxControl
import com.zj.data.common.rememberSwipeBoxControl
import com.zj.data.model.Note
import com.zj.data.utils.DateUtils


/**
 * Á¨îËÆ∞ÂàóË°®È°π
 */
@Composable
fun NoteItem(
    onClick: () -> Unit = {},
    onDelete: () -> Unit = {},
    searchQuery: String = "",
    control: SwipeBoxControl = rememberSwipeBoxControl(),
    note: Note
) {
    val showDialog = remember { mutableStateOf(false) }
    SwipeBox(
        control = control,
        modifier = Modifier
            .padding(
                top = 8.dp,
                bottom = 8.dp,
                end = dimensionResource(R.dimen.screen_horizontal_margin)
            )
            .fillMaxWidth()
            .wrapContentHeight(),
        actionWidth = 100.dp,
        endAction = listOf {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .wrapContentHeight()
                    .heightIn(min = 100.dp, max = 300.dp) // ÈôêÂà∂È´òÂ∫¶ËåÉÂõ¥
                    .align(Alignment.Center)
                    .padding(8.dp)
                    .background(MaterialTheme.colorScheme.error, shape = MaterialTheme.shapes.large)
                    .clickable {
                        showDialog.value = true
                        control.center()
                    }) {
                Text(
                    text = stringResource(R.string.delete),
                    modifier = Modifier.align(Alignment.Center),
                    style = TextStyle(
                        color = Color.White,
                        fontSize = dimensionResource(R.dimen.small_text).value.sp
                    )
                )
            }
        },
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .height(IntrinsicSize.Min) // Ê†πÊçÆÂÜÖÂÆπÈ´òÂ∫¶Ëá™Âä®Ë∞ÉÊï¥
                .heightIn(min = 100.dp, max = 300.dp), // ÈôêÂà∂È´òÂ∫¶ËåÉÂõ¥ ,
            shape = MaterialTheme.shapes.large,
            colors = CardDefaults.cardColors(
                containerColor = colorResource(R.color.item_background)
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
        ) {
            Column(
                modifier = Modifier
                    .weight(1f)
                    .clickable { onClick() }
                    .padding(dimensionResource(R.dimen.item_margin))
            ) {
                HighlightedText(
                    text = note.title,
                    highlight = searchQuery,
                    style = TextStyle(
                        fontSize = dimensionResource(R.dimen.title_text).value.sp,
                        fontWeight = FontWeight.Bold
                    ),
                    maxLines = 2
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = DateUtils.formatTimestamp(note.timestamp),
                    fontSize = dimensionResource(R.dimen.subtitle_text).value.sp,
                    textAlign = TextAlign.Start,
                    maxLines = 2,
                )
                Spacer(modifier = Modifier.height(4.dp))
                LightweightMarkdownPreview(
                    content = note.content,
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(min = 100.dp, max = 300.dp)
                        .clickable { onClick() }
                )
            }
        }
    }
    DeleteDialog(showDialog, note.title, onDelete)
}


@Composable
private fun LightweightMarkdownPreview(
    content: String,
    modifier: Modifier = Modifier
) {
    val annotatedText = remember(content) {
        buildAnnotatedString {
            val previewContent = content.take(800) // Â§ßÂπÖÂ¢ûÂä†È¢ÑËßàÈïøÂ∫¶ÔºåÊòæÁ§∫Êõ¥Â§öÂÜÖÂÆπ
            var index = 0

            while (index < previewContent.length) {
                when {
                    // ‰ª£Á†ÅÂùóÔºöÊòæÁ§∫ÊèêÁ§∫
                    previewContent.startsWith("```", index) -> {
                        val endIndex = previewContent.indexOf("```", index + 3)
                        if (endIndex != -1) {
                            append("üíª ‰ª£Á†ÅÂùó ")
                            index = endIndex + 3
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // ÂõæÁâáÔºöÊòæÁ§∫ÊèêÁ§∫
                    previewContent.startsWith("![", index) -> {
                        val endIndex = previewContent.indexOf(")", index)
                        if (endIndex != -1) {
                            append("üì∑ ")
                            index = endIndex + 1
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // Âä†Á≤ó
                    previewContent.startsWith("**", index) -> {
                        val endIndex = previewContent.indexOf("**", index + 2)
                        if (endIndex != -1) {
                            pushStyle(SpanStyle(fontWeight = FontWeight.Bold))
                            append(previewContent.substring(index + 2, endIndex))
                            pop()
                            index = endIndex + 2
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // Êñú‰ΩìÔºàÂçïÊòüÂè∑Êàñ‰∏ãÂàíÁ∫øÔºâ
                    (previewContent.startsWith("*", index) && !previewContent.startsWith("**", index)) ||
                    previewContent.startsWith("_", index) -> {
                        val delimiter = if (previewContent[index] == '*') "*" else "_"
                        val endIndex = previewContent.indexOf(delimiter, index + 1)
                        if (endIndex != -1) {
                            pushStyle(SpanStyle(fontStyle = FontStyle.Italic))
                            append(previewContent.substring(index + 1, endIndex))
                            pop()
                            index = endIndex + 1
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // Âà†Èô§Á∫ø
                    previewContent.startsWith("~~", index) -> {
                        val endIndex = previewContent.indexOf("~~", index + 2)
                        if (endIndex != -1) {
                            pushStyle(SpanStyle(textDecoration = TextDecoration.LineThrough))
                            append(previewContent.substring(index + 2, endIndex))
                            pop()
                            index = endIndex + 2
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // Ë°åÂÜÖ‰ª£Á†Å
                    previewContent.startsWith("`", index) -> {
                        val endIndex = previewContent.indexOf("`", index + 1)
                        if (endIndex != -1) {
                            pushStyle(SpanStyle(
                                fontFamily = FontFamily.Monospace,
                                background = Color.LightGray.copy(alpha = 0.3f)
                            ))
                            append(previewContent.substring(index + 1, endIndex))
                            pop()
                            index = endIndex + 1
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // ÈìæÊé•
                    previewContent.startsWith("[", index) -> {
                        val textEnd = previewContent.indexOf("]", index)
                        val urlEnd = previewContent.indexOf(")", textEnd)
                        if (textEnd != -1 && urlEnd != -1 && previewContent[textEnd + 1] == '(') {
                            pushStyle(SpanStyle(color = Color.Blue, textDecoration = TextDecoration.Underline))
                            append(previewContent.substring(index + 1, textEnd))
                            pop()
                            index = urlEnd + 1
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // Ê†áÈ¢òÊ†áËÆ∞ÔºöÁßªÈô§
                    previewContent.startsWith("#", index) && (index == 0 || previewContent[index - 1] == '\n') -> {
                        var hashCount = 0
                        while (index + hashCount < previewContent.length && previewContent[index + hashCount] == '#') {
                            hashCount++
                        }
                        index += hashCount
                        if (index < previewContent.length && previewContent[index] == ' ') {
                            index++
                        }
                    }
                    // Êó†Â∫èÂàóË°®
                    (previewContent.startsWith("- ", index) || previewContent.startsWith("* ", index)) &&
                    (index == 0 || previewContent[index - 1] == '\n') -> {
                        append("‚Ä¢ ")
                        index += 2
                    }
                    // ÊúâÂ∫èÂàóË°®
                    previewContent[index].isDigit() && (index == 0 || previewContent[index - 1] == '\n') -> {
                        var numEnd = index
                        while (numEnd < previewContent.length && previewContent[numEnd].isDigit()) {
                            numEnd++
                        }
                        if (numEnd < previewContent.length && previewContent[numEnd] == '.' &&
                            numEnd + 1 < previewContent.length && previewContent[numEnd + 1] == ' ') {
                            append(previewContent.substring(index, numEnd + 1))
                            append(" ")
                            index = numEnd + 2
                        } else {
                            append(previewContent[index])
                            index++
                        }
                    }
                    // ÂºïÁî®Âùó
                    previewContent.startsWith("> ", index) && (index == 0 || previewContent[index - 1] == '\n') -> {
                        pushStyle(SpanStyle(
                            color = Color.Gray,
                            fontStyle = FontStyle.Italic
                        ))
                        append("‚îÉ ")
                        index += 2
                        // ËØªÂèñÂà∞Ë°åÂ∞æ
                        val lineEnd = previewContent.indexOf('\n', index)
                        if (lineEnd != -1) {
                            append(previewContent.substring(index, lineEnd))
                            pop()
                            index = lineEnd
                        } else {
                            append(previewContent.substring(index))
                            pop()
                            index = previewContent.length
                        }
                    }
                    // ÊôÆÈÄöÂ≠óÁ¨¶
                    else -> {
                        append(previewContent[index])
                        index++
                    }
                }
            }
        }
    }

    Text(
        text = annotatedText,
        style = MaterialTheme.typography.bodyMedium,
        maxLines = 8, // Â¢ûÂä†ÊúÄÂ§ßË°åÊï∞ÔºåÊòæÁ§∫Êõ¥Â§öÂÜÖÂÆπ
        overflow = TextOverflow.Ellipsis,
        modifier = modifier
    )
}

@Preview
@Composable
private fun NoteItemPreview() {
    NoteItem(
        note = Note(title = "title", content = "content"),
    )
}
